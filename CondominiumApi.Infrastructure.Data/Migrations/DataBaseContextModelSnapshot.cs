// <auto-generated />
using System;
using CondominiumApi.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CondominiumApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CondominiumApi.Domain.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chave Primária da tabela de apartamento \"Apartment\"");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("INT")
                        .HasColumnName("Number")
                        .HasComment("Numero do Apartamento");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave da tabela de Pessoa");

                    b.Property<Guid?>("ResidentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave da tabela de Pessoa");

                    b.HasKey("Id")
                        .HasName("PK_Apartment");

                    b.HasIndex("BlockId");

                    b.HasIndex(new[] { "Number", "BlockId" }, "IX_Apartment_Block")
                        .IsUnique();

                    b.HasIndex(new[] { "OwnerId" }, "IX_Apartment_OwnerId")
                        .IsUnique();

                    b.HasIndex(new[] { "ResidentId" }, "IX_Apartment_ResidentId")
                        .IsUnique()
                        .HasFilter("[ResidentId] IS NOT NULL");

                    b.ToTable("Apartment", "Condominium");

                    b.HasComment("Tabela de Apartamentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockId = 1,
                            Number = 1,
                            OwnerId = new Guid("5a7a5658-ccbc-4451-b4bc-5a0264bd0a81")
                        },
                        new
                        {
                            Id = 2,
                            BlockId = 2,
                            Number = 1,
                            OwnerId = new Guid("495dadfc-add1-4826-bde8-828c9b0c0134"),
                            ResidentId = new Guid("495dadfc-add1-4826-bde8-828c9b0c0134")
                        },
                        new
                        {
                            Id = 3,
                            BlockId = 1,
                            Number = 2,
                            OwnerId = new Guid("59de6d3b-2002-42fa-80e3-057f2cfc5cae"),
                            ResidentId = new Guid("e69cb7b8-164c-41ed-a670-7b40480c3887")
                        });
                });

            modelBuilder.Entity("CondominiumApi.Domain.Entities.BlockOfApartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chave Primária da tabela de blocos de apartamento \"Block\"");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Block")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("NVARCHAR(2)")
                        .HasColumnName("Block")
                        .HasComment("Bloco por Apartamento");

                    b.HasKey("Id")
                        .HasName("PK_Block");

                    b.HasIndex(new[] { "Block" }, "IX_Block")
                        .IsUnique();

                    b.ToTable("Block", "Condominium");

                    b.HasComment("Tabela de Bloco de apartamentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Block = "A"
                        },
                        new
                        {
                            Id = 2,
                            Block = "B"
                        },
                        new
                        {
                            Id = 3,
                            Block = "C"
                        });
                });

            modelBuilder.Entity("CondominiumApi.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave Primária da tabela de pessoas \"Person\"");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("Cpf")
                        .HasComment("CPF");

                    b.Property<DateTime>("Create_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("Create_Date")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data de Criação do Cadastro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Email")
                        .HasComment("Email");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR(30)")
                        .HasColumnName("First_Name")
                        .HasComment("Nome");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR(30)")
                        .HasColumnName("Last_Name")
                        .HasComment("Sobrenome");

                    b.Property<DateTime?>("Last_Update_Date")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("Last_Update_Date")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Ultima atualização do cadastro");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("Phone")
                        .HasComment("Telefone para contato");

                    b.HasKey("Id")
                        .HasName("PK_Person");

                    b.HasIndex(new[] { "Cpf" }, "IX_Person_Cpf")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "IX_Person_Email")
                        .IsUnique();

                    b.ToTable("Person", "Condominium");

                    b.HasComment("Tabela de Pessoas Cadastradas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fd401e3-fb52-4eed-b7df-28c99753ae55"),
                            Cpf = "0124567890",
                            Create_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            First_Name = "Admin",
                            Last_Name = "System",
                            Phone = "11987654321"
                        },
                        new
                        {
                            Id = new Guid("5a7a5658-ccbc-4451-b4bc-5a0264bd0a81"),
                            Cpf = "11122233344",
                            Create_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "garen@stemmaguarda.com",
                            First_Name = "Garen",
                            Last_Name = "Stemmaguarda",
                            Phone = "11987654322"
                        },
                        new
                        {
                            Id = new Guid("495dadfc-add1-4826-bde8-828c9b0c0134"),
                            Cpf = "22233344455",
                            Create_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lux@stemmaguarda.com",
                            First_Name = "Lux",
                            Last_Name = "Stemmaguarda",
                            Phone = "11987654322"
                        },
                        new
                        {
                            Id = new Guid("59de6d3b-2002-42fa-80e3-057f2cfc5cae"),
                            Cpf = "22233344456",
                            Create_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "annie@hastur.com",
                            First_Name = "Annie",
                            Last_Name = "Hastur",
                            Phone = "11987654322"
                        },
                        new
                        {
                            Id = new Guid("e69cb7b8-164c-41ed-a670-7b40480c3887"),
                            Cpf = "33344455566",
                            Create_Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ashe@avarosa.com",
                            First_Name = "Ashe",
                            Last_Name = "Avarosa",
                            Phone = "11987654323"
                        });
                });

            modelBuilder.Entity("CondominiumApi.Domain.Entities.Apartment", b =>
                {
                    b.HasOne("CondominiumApi.Domain.Entities.BlockOfApartment", "Block")
                        .WithMany("Apartments")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CondominiumApi.Domain.Entities.Person", "Owner")
                        .WithOne("ApartmentOwner")
                        .HasForeignKey("CondominiumApi.Domain.Entities.Apartment", "OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Apartment_Owner_PersonId");

                    b.HasOne("CondominiumApi.Domain.Entities.Person", "Resident")
                        .WithOne("ApartmentResident")
                        .HasForeignKey("CondominiumApi.Domain.Entities.Apartment", "ResidentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Apartment_Resident_PersonId");

                    b.Navigation("Block");

                    b.Navigation("Owner");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("CondominiumApi.Domain.Entities.BlockOfApartment", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("CondominiumApi.Domain.Entities.Person", b =>
                {
                    b.Navigation("ApartmentOwner")
                        .IsRequired();

                    b.Navigation("ApartmentResident")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
